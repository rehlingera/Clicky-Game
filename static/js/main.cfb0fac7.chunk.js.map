{"version":3,"sources":["components/ClickItem.js","components/CurrentScore.js","components/TopScore.js","components/Feedback.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["styles","imgStyle","width","ClickItem","props","state","_React$createElement","react_default","a","createElement","style","backgroundImage","src","concat","Object","defineProperty","alt","id","clicked","handleClickChange","textStyle","textAlign","divStyle","display","padding","margin","CurrentScore","className","children","TopScore","height","Feedback","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","output","Component","randomize","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Cats","Game","currentScore","topScore","console","log","target","filter","item","setState","handleIncorrect","handleReset","handleIncrease","handleCorrect","i","_this2","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","components_CurrentScore","components_TopScore","components_Feedback","map","key","components_ClickItem","image","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6zBAEMA,EAAS,CACXC,SAAU,CACNC,MAAO,SAoBAC,MAhBf,SAAmBC,EAAOC,GAAO,IAAAC,EAC7B,OACIC,EAAAC,EAAAC,cAAA,OAAAH,EAAA,CACII,MAAO,CACHC,gBAAiBP,EAAMQ,IAAN,OAAAC,OAAmBT,EAAMQ,IAAzB,KAAkC,SAF3DE,OAAAC,EAAA,EAAAD,CAAAR,EAAA,QAIWN,EAAOC,UAJlBa,OAAAC,EAAA,EAAAD,CAAAR,EAAA,YAKc,cALdQ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,MAMSF,EAAMY,KANfF,OAAAC,EAAA,EAAAD,CAAAR,EAAA,KAOQF,EAAMa,IAPdH,OAAAC,EAAA,EAAAD,CAAAR,EAAA,UAQaF,EAAMc,SARnBJ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,UASa,kBAAMF,EAAMe,kBAAkBf,EAAMa,MATjDX,KCRFN,EAAS,CACXoB,UAAW,CACPC,UAAW,SAEfC,SAAU,CACNC,QAAS,eACTC,QAAS,oBACTC,OAAQ,oBAYDC,MARf,SAAsBtB,GAClB,OACIG,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,kBAAkBjB,MAAOV,EAAOsB,UAC3Cf,EAAAC,EAAAC,cAAA,QAAMC,MAAOV,EAAOoB,UAAWO,UAAU,gBAAzC,kBAAwEvB,EAAMwB,YCdpF5B,EAAS,CACXoB,UAAW,CACPC,UAAW,SAEfC,SAAU,CACNC,QAAS,eACTC,QAAS,oBACTC,OAAQ,oBAYDI,MARf,SAAkBzB,GACd,OACIG,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,cAAcjB,MAAOV,EAAOsB,UACvCf,EAAAC,EAAAC,cAAA,QAAMC,MAAOV,EAAOoB,UAAWO,UAAU,YAAzC,cAAgEvB,EAAMwB,YCd5E5B,EAAS,CACXoB,UAAW,CACPC,UAAW,SACXS,OAAO,UAmBAC,cAdX,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAH,IACfC,EAAAlB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAApB,OAAAsB,EAAA,EAAAtB,CAAAiB,GAAAM,KAAAH,KAAM9B,KACDC,MAAQ,CACTiC,OAAQ,IAHGN,wEAQf,OACIzB,EAAAC,EAAAC,cAAA,MAAIC,MAAOV,EAAOoB,WAAYc,KAAK9B,MAAMwB,iBAV9BW,oBCDnBC,EAAY,SAAAC,GAEZ,IADA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAClB,IAAMD,GACTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEzB,OAAOD,GAGXD,EAAUS,GAEV,IAAMjD,EAAS,CACXsB,SAAU,CACNC,QAAS,eACTrB,MAAO,QAkHAgD,cA7GX,SAAAA,EAAY9C,GAAO,IAAA4B,EAAA,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAgB,IACflB,EAAAlB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAApB,OAAAsB,EAAA,EAAAtB,CAAAoC,GAAAb,KAAAH,KAAM9B,KAGVC,MAAQ,CACJ8C,aAAc,EACdC,SAAU,EACVlC,SAAS,EACToB,OAAQ,yGARON,EAWnBb,kBAAoB,SAACF,GACjBoC,QAAQC,IAAIrC,GACZ,IAAIsC,EAASN,EAAKO,OAAO,SAAAC,GAAI,OAAIA,EAAKxC,KAAOA,IACzCsC,EAAO,GAAGrC,SACVc,EAAK0B,SAAS,CAAEP,aAAc,IAC9BE,QAAQC,IAAI,QACZtB,EAAK2B,kBACL3B,EAAK4B,gBAGLL,EAAO,GAAGrC,SAAU,EACpBc,EAAK0B,SAAS,CAAEP,aAAcnB,EAAKmB,aAAe,IAClDE,QAAQC,IAAI,QACZtB,EAAK6B,iBACL7B,EAAK8B,gBACLtB,EAAUS,KA1BCjB,EA+BnB6B,eAAiB,WACT7B,EAAK3B,MAAM+C,WAAapB,EAAK3B,MAAM8C,cACnCnB,EAAK0B,SAAS,CAAEP,aAAcnB,EAAK3B,MAAM8C,aAAe,IACxDnB,EAAK0B,SAAS,CAAEN,SAAUpB,EAAK3B,MAAM+C,SAAW,KAGhDpB,EAAK0B,SAAS,CAAEP,aAAcnB,EAAK3B,MAAM8C,aAAe,KArC7CnB,EAyCnB4B,YAAc,WACV,IAAK,IAAIG,EAAE,EAAGA,EAAEd,EAAKJ,OAAQkB,IACzBd,EAAKc,GAAG7C,SAAQ,GA3CLc,EA+CnB8B,cAAgB,WACZ9B,EAAK0B,SAAS,CAAEpB,OAAQ,iBAhDTN,EAmDnB2B,gBAAkB,WACd3B,EAAK0B,SAAS,CAAEpB,OAAQ,2BApDTN,wEAuDV,IAAAgC,EAAA9B,KACL,OACI3B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,gDACXpB,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,eAAesC,KAAK,KAAjC,gBACA1D,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,iBAAiBuC,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC1JhE,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,yBAEpBpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,2BAA2BV,GAAG,cACzCV,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,sBACVpB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,mBACVpB,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,WAAWsC,KAAK,6CAA7B,kBAGR1D,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,eACZpB,EAAAC,EAAAC,cAAC+D,EAAD,KAAetC,KAAK7B,MAAM8C,cAD9B,MAC6D5C,EAAAC,EAAAC,cAACgE,EAAD,KAAWvC,KAAK7B,MAAM+C,aAI3F7C,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,UACXpB,EAAAC,EAAAC,cAACiE,EAAD,KAAWxC,KAAK7B,MAAMiC,UAG9B/B,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,UACfpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,SAEPsB,EAAK0B,IACD,SAAAlB,GAAI,OACAlD,EAAAC,EAAAC,cAAA,OAAKC,MAAOV,EAAOsB,SAAUsD,IAAKnB,EAAKxC,IACnCV,EAAAC,EAAAC,cAACoE,EAAD,CACIjE,IAAK6C,EAAKqB,MACV9D,IAAKyC,EAAKxC,GACVA,GAAIwC,EAAKxC,GACTE,kBAAmB6C,EAAK7C,kBACxB0C,eAAgBG,EAAKH,eACrBD,YAAaI,EAAKJ,YAClB1C,QAASuC,EAAKvC,cAOtCX,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,oBAtGpBY,aCdJwC,mLARX,OACExE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuE,EAAD,cAJUzC,aCOE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cfb0fac7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst styles = {\r\n    imgStyle: {\r\n        width: \"100%\"\r\n    }\r\n};\r\n\r\nfunction ClickItem(props, state) {\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundImage: props.src ? `url(${props.src})` : \"none\"\r\n            }}\r\n            style={styles.imgStyle}\r\n            className=\"clickImage\"\r\n            alt={props.alt}\r\n            id={props.id}\r\n            clicked={props.clicked}\r\n            onClick={() => props.handleClickChange(props.id)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ClickItem;","import React, { Component } from \"react\"\r\n\r\nconst styles = {\r\n    textStyle: {\r\n        textAlign: \"right\"\r\n    },\r\n    divStyle: {\r\n        display: \"inline-block\",\r\n        padding: \"0px 10px 0px 10px\",\r\n        margin: \"8px 0px 8px 0px\"\r\n    }\r\n};\r\n\r\nfunction CurrentScore(props) {\r\n    return (\r\n        <div className='currentScoreDiv' style={styles.divStyle}>\r\n            <span style={styles.textStyle} className='currentScore'>Current Score: {props.children}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrentScore;","import React, { Component } from \"react\"\r\n\r\nconst styles = {\r\n    textStyle: {\r\n        textAlign: \"right\"\r\n    },\r\n    divStyle: {\r\n        display: \"inline-block\",\r\n        padding: \"0px 10px 0px 10px\",\r\n        margin: \"8px 0px 8px 0px\"\r\n    }\r\n};\r\n\r\nfunction TopScore(props) {\r\n    return (\r\n        <div className='topScoreDiv' style={styles.divStyle}>\r\n            <span style={styles.textStyle} className='topScore'>Top Score: {props.children}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TopScore;","import React, { Component } from \"react\";\r\n\r\nconst styles = {\r\n    textStyle: {\r\n        textAlign: \"center\",\r\n        height:\"100px\"\r\n    }\r\n};\r\n\r\nclass Feedback extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            output: \"\"\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <h2 style={styles.textStyle}>{this.props.children}</h2>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feedback;","import React, { Component } from \"react\";\r\nimport ClickItem from './ClickItem';\r\nimport CurrentScore from './CurrentScore';\r\nimport TopScore from './TopScore';\r\nimport Feedback from './Feedback';\r\nimport Cats from '../cats.json';\r\n\r\n// Function for randomizing the images array\r\nvar randomize = array => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\n\r\nrandomize(Cats);\r\n\r\nconst styles = {\r\n    divStyle: {\r\n        display: \"inline-block\",\r\n        width: \"25%\"\r\n    }\r\n};\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    state = {\r\n        currentScore: 0,\r\n        topScore: 0,\r\n        clicked: false,\r\n        output: \"Console the scared cats! But be careful not to pet the same cat twice! Stressed out cats bite people!\"\r\n    }\r\n\r\n    handleClickChange = (id) => {\r\n        console.log(id)\r\n        var target = Cats.filter(item => item.id === id);\r\n        if (target[0].clicked) {\r\n            this.setState({ currentScore: 0 });\r\n            console.log(\"loss\");\r\n            this.handleIncorrect();\r\n            this.handleReset();\r\n        }\r\n        else {\r\n            target[0].clicked = true;\r\n            this.setState({ currentScore: this.currentScore + 1 })\r\n            console.log(\"good\");\r\n            this.handleIncrease();\r\n            this.handleCorrect();\r\n            randomize(Cats);\r\n        }\r\n\r\n    };\r\n\r\n    handleIncrease = () => {\r\n        if (this.state.topScore === this.state.currentScore) {\r\n            this.setState({ currentScore: this.state.currentScore + 1 });\r\n            this.setState({ topScore: this.state.topScore + 1 });\r\n        }\r\n        else {\r\n            this.setState({ currentScore: this.state.currentScore + 1 })\r\n        }\r\n    };\r\n\r\n    handleReset = () => {\r\n        for (var i=0; i<Cats.length; i++) {\r\n            Cats[i].clicked=false;\r\n        };\r\n    };\r\n\r\n    handleCorrect = () => {\r\n        this.setState({ output: \"Good kitty!\" });\r\n    };\r\n\r\n    handleIncorrect = () => {\r\n        this.setState({ output: \"Oh no! Kitty bit you!\" });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-info\">\r\n                    <a className=\"navbar-brand\" href=\"#\">Cat Consoler</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            <li className=\"nav-item active\">\r\n                                <a className=\"nav-link\" href=\"https://github.com/rehlingera/Clicky-Game\">See the Code</a>\r\n                            </li>\r\n                        </ul>\r\n                        <span className=\"navbar-text\">\r\n                            <CurrentScore>{this.state.currentScore}</CurrentScore> | <TopScore>{this.state.topScore}</TopScore>\r\n                        </span>\r\n                    </div>\r\n                </nav>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-12'>\r\n                            <Feedback>{this.state.output}</Feedback>\r\n                        </div>\r\n                    </div>\r\n                    <div className='row'>\r\n                        <div className='col-2'></div>\r\n                        <div className='col-8'>\r\n                            {\r\n                                Cats.map(\r\n                                    item => (\r\n                                        <div style={styles.divStyle} key={item.id}>\r\n                                            <ClickItem\r\n                                                src={item.image}\r\n                                                alt={item.id}\r\n                                                id={item.id}\r\n                                                handleClickChange={this.handleClickChange}\r\n                                                handleIncrease={this.handleIncrease}\r\n                                                handleReset={this.handleReset}\r\n                                                clicked={item.clicked}\r\n                                            />\r\n                                        </div>\r\n                                    )\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div className='col=2'></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}